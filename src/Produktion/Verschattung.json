/* -- do not edit following lines - START --
{
  "debug": false,
  "verbose": false
}
-- do not edit previous lines - END --*/
const tempThresholdInGrad = 15;
const helligkeitThreshold = 185;

const Configs = {
    "WZ-Raffstore-SW.LEVEL": {
        "levels": {
            "geschlossen" : 0,
            "verschattetDiff" : 2
            
        },
        "maxDelayInSec": 50,
        "disabled": () => {return false;}
    },
    "WZ-Raffstore-NW.LEVEL": {
        "levels": {
            "geschlossen" : 0,
            "verschattetDiff" : 1.5 
            
        },
        "maxDelayInSec": 55,
        "disabled": () => {return false;}
    },
    "ES-Raffstore-SW.LEVEL": {
        "levels": { 
            "geschlossen" : 15,
            "verschattetDiff" : 1.5
            
        },
        "maxDelayInSec": 63,
        "disabled" : () => {return States.getStateByName("Tuerkontakt-SW.STATE");}
    },
    "ES-Raffstore-SO.LEVEL": {
        "levels": { 
            "geschlossen" : 15,
            "verschattetDiff" : 1.5
            
        },
        "maxDelayInSec": 63,
        "disabled" : () => {return States.getStateByName("Tuerkontakt-SO.STATE");}
    },
    "KU-Raffstore-SO.LEVEL": {
        "levels": {
            "geschlossen" : 0,
            "verschattetDiff" : 2
            
        },
        "maxDelayInSec": 36,
        "disabled": () => {return false;}
    },
    "HWR-Raffstore-SO.LEVEL": {
        "levels": {
            "geschlossen" : 0,
            "verschattetDiff" : 2
            
        },
        "maxDelayInSec": 40,
        "disabled": () => {return false;}
    },
    "BU-Raffstore-SW.LEVEL": {
        "levels": {
            "geschlossen" : 0,
            "verschattetDiff" : 2
            
        },
        "maxDelayInSec": 50,
        "disabled": () => {return false;}
    },
    "KI-Raffstore-SW.LEVEL": {
        "levels": {
            "geschlossen" : 0,
            "verschattetDiff" : 2
            
        },
        "maxDelayInSec": 48,
        "disabled": () => {return false;}
    }
    
};

function verschatte(name) {
    const config = Configs[name];
    const verschattungsGrad = "verschattet";
    const currentValue = States.getStateByName(name);
    const manuelleVerschattung = SystemVariablen.ManuelleVerschattung.get();
    log("Manuelle Verschattung: " + manuelleVerschattung);
    if (manuelleVerschattung === true) {
        log("Manuelle Verschattung aktiv, keine Änderung.")
        return;
    }
    if (currentValue === 0) { 
        log(name + ": vollverschattet, keine Änderung.")
        return;
    }
    if (config.disabled()) {
        log(name + ": disabled, keine Änderung.")
        return;
    }
    
    const offest = currentValue > config.levels.geschlossen ? config.levels.verschattetDiff : -config.levels.verschattetDiff 
    const diff = currentValue - (config.levels.geschlossen + config.levels.verschattetDiff);
    log(name + ": " + currentValue +  ", offest: " + offest + ", diff: " + diff);
    if (Math.abs(diff) !== 0) {
        const calculatedDelay = config.maxDelayInSec / 100.0 * Math.abs(diff);
        
        States.setStateByName(name, config.levels.geschlossen);
        
        log("set " + name + " to " + config.levels.geschlossen + " after " + calculatedDelay + " to " + (config.levels.geschlossen + offest));
        States.setStateDelayedByName(name, config.levels.geschlossen + offest, calculatedDelay, false);
    }
}  

function verschatteAll(devices) {
    const temp = SystemVariablen.AussenTemp.get();
    const helligkeit = States.getStateByName("Bewegungsmelder-Sender.BRIGHTNESS");
    log("Prüfe Verschattung: temp: " + temp + " > " + tempThresholdInGrad +  " , helligkeit: " + helligkeit + " > " + helligkeitThreshold);
    if (temp > tempThresholdInGrad && helligkeit > helligkeitThreshold) {
        log("verschatteAll")
        devices.forEach(verschatte);
    }
}

function verschatteSW() {
    verschatteAll(["ES-Raffstore-SW.LEVEL", "WZ-Raffstore-SW.LEVEL", "BU-Raffstore-SW.LEVEL", "KI-Raffstore-SW.LEVEL"]);
}
function verschatteSO() {
    verschatteAll(["KU-Raffstore-SO.LEVEL", "HWR-Raffstore-SO.LEVEL", "ES-Raffstore-SO.LEVEL"]);
}
function verschatteNW() {
    verschatteAll(["WZ-Raffstore-NW.LEVEL"]);
}

function entferneVerschattung(devices) {
    devices.forEach( r => {
        const currentValue = States.getStateByName(r);
        if (currentValue === 0) { 
            log(name + ": vollverschattet, kein öffnen.")
            return;
        }    
        States.setStateByName(r, 100);
    });
}

function entferneVerschattungSO(){
    entferneVerschattung(["KU-Raffstore-SO.LEVEL", "HWR-Raffstore-SO.LEVEL", "ES-Raffstore-SO.LEVEL"]);
}

function entferneVerschattungSW(){
    entferneVerschattung(["ES-Raffstore-SW.LEVEL", "WZ-Raffstore-SW.LEVEL", "BU-Raffstore-SW.LEVEL"]);
}



schedule("*/5 17-19 * * *", verschatteNW); 
schedule("*/5 13-19 * * *", verschatteSW);
schedule("*/5 8-15 * * *", verschatteSO);

schedule("0 16 * * *", entferneVerschattungSO);
schedule("0 20 * * *", entferneVerschattungSW);
