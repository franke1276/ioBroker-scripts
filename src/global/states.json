/* -- do not edit following lines - START --
{
  "debug": false,
  "verbose": false
}
-- do not edit previous lines - END --*/
var States = {
    "getStateByName" : function (name) {
        const state = getState(getIdByName(name));
         //log("state for " + name + " : " + JSON.stringify(state));
        return state.val;
    },
    "setStateByName": function (name, state) {
        setState(getIdByName(name), state, false, function () { log(name + " was successfully set"); });
    },
    "setStateDelayedByName": function (name, state, timeInSec, reset) {
        setStateDelayed(getIdByName(name), state, false, timeInSec * 1000 , reset, function () { log(name + " was successfully delayed ("+timeInSec+") set"); });
    }
}

var SystemVariablen = {
    "BodenFeuchtigkeit":  {
        set(menge) {
            States.setStateByName("BodenFeuchtigkeit", menge);    
        },
        get() {
            return States.getStateByName("BodenFeuchtigkeit");
        }
    },
    "AussenTemp": {
        set(menge) {
            States.setStateByName("AussenTemp", menge);    
        },
        get() {
            return States.getStateByName("AussenTemp");
        }
        
    },
    "ForecastTemp": {
        set(menge) {
            States.setStateByName("ForecastTemp", menge);    
        },
        get() {
            return States.getStateByName("ForecastTemp");
        }
        
    },
    "MaxTemp": {
        set(menge) {
            States.setStateByName("MaxTemp", menge);    
        },
        get() {
            return States.getStateByName("MaxTemp");
        }
    },
    "RegenForecast": {
        set(menge) {
            States.setStateByName("RegenForecast", menge);    
        },
        get() {
            return States.getStateByName("RegenForecast");
        }
    },
    "RegenHeute": {
        set(menge) {
            States.setStateByName("RegenHeute", menge);    
        },
        get() {
            return States.getStateByName("RegenHeute");
        }
    }
}


